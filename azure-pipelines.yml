# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
resources:
- repo: self

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: tag
  value: '$(Build.BuildId)'
- name: namespace
  value: 'akhinat1-in'
- name: template
  value: 'app_template.yaml'
- name: sourceimage
  value: 'dotnet:2.1'
- name: applicationname
  value: 'stacksmith'
- name: buildConfiguration
  value: 'Release'
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImageName: $(vmImageName)
    steps:
        
    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'My Openshift'
        cmd: 'oc new-build --name=$(applicationname) --image-stream=$(sourceimage) --strategy=source --binary  -n $(namespace)'
        uselocalOc: true
        ignoreFlag: true
      displayName: Creating New Build
    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'My Openshift'
        cmd: 'start-build $(applicationname) --from-dir=/home/vsts/work/1/s/ --follow -n $(namespace)'
        uselocalOc: true
        ignoreFlag: true
      displayName: Starting Build
    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'My Openshift'
        cmd: 'new-app --template=mysql-ephemeral --param=MYSQL_USER=sample --param=MYSQL_PASSWORD=sample --param=MYSQL_DATABASE=todolist --param=DATABASE_SERVICE_NAME=mysql --name mysql -n $(namespace)'
        uselocalOc: true
        ignoreFlag: true
      displayName: Deploying Database   

    - task: oc-cmd@2
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'My Openshift'
        cmd: 'new-app -f $(Build.SourcesDirectory)/$(template) -p APP_NAME=$(applicationname)  --dry-run -o yaml | oc apply -f - -n $(namespace)'
        ignoreFlag: true
        uselocalOc: true
      displayName: Deploying Application 
    - task: CopyFiles@2
      inputs:
        Contents: '$(template)'
        TargetFolder: '$(build.artifactstagingdirectory)'
      displayName: Copying file  
                 
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: Pushing Build Artifacts
   
  - deployment: deploy
    pool:
      vmImage: '$(vmImageName)'
      workspace:
        clean: all
    environment: 'TFG'     
    strategy:
    # Default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
           - task: DownloadPipelineArtifact@1
             inputs:
              artifactName: 'charts'
              downloadPath: '$(System.ArtifactsDirectory)/charts'
